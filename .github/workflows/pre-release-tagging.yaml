name: Pre-release Tagging Workflow

on:
  pull_request:
    types: [closed]
    branches:
  
      - main
env:
  BRANCH_NAME: 'main'

jobs:
  find_comit_with_version:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Get latest version tag
        id: last_version
        run: |
          lastVersionCommit=0
          # check if git tag result is not empty string
          if git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 --exclude "*-*" >/dev/null 2>&1; then
            echo "Main branch contains a tag that   matches the pattern.";
            # lastVersionTag do jete komiti qe ka tag v0.0.1 psh
            lastVersionTag=git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 --exclude "*-*"
            lastVersionCommit=git rev-list --max-count=1 --tags $lastVersionTag
            echo "LAST_VERSION_TAG=$lastVersionTag" >> $GITHUB_ENV
          fi
          echo "LAST_VERSION_COMMIT=$lastVersionCommit" >> $GITHUB_ENV
          echo "$lastVersionCommit"
    outputs:
        LAST_VERSION_COMMIT:  ${{ env.LAST_VERSION_COMMIT }}
        LAST_VERSION_TAG: ${{ env.LAST_VERSION_TAG }}
  prerelease_tagging:
    needs:
      - find_comit_with_version
    if: needs.find_comit_with_version.outputs.LAST_VERSION_COMMIT != 0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main
          ssh-key: ${{ secrets.TEST_GITOPS_UPDATE }}
          fetch-depth: 0 # fetch all history, including tags

      - name: Determine next pre-release index
        id: next_prerelease
        run: |
          prereleaseIndex=$(git tag --sort=-version:refname | grep -E '^pre-release.([0-9]+)' | head -n1 | awk -F'.' '{print $2+1}')
          LAST_RELEASE_COMMIT_ID=$(git rev-parse HEAD)
          releaseTagExists=0
          if [ -n "$(git tag | grep 'release')" ]; then
            echo "release exists, get the commit hash for tag release"
            LAST_RELEASE_COMMIT_ID=$(git rev-list --max-count=1 --tags release)
            releaseTagExists=1
          fi
          echo "LAST_RELEASE_COMMIT_ID=$LAST_RELEASE_COMMIT_ID" >> $GITHUB_ENV
          echo "RELEASE_TAG_EXISTS=$releaseTagExists" >> $GITHUB_ENV
          if [ -z "$prereleaseIndex" ]; then
            prereleaseIndex=1
          fi
          echo "NEXT_PRERELEASE_INDEX=$prereleaseIndex" >> $GITHUB_ENV
      - name: Add pre-release tag
        run: |
          git config --global user.email "bardhylbegolli@gmail.com"
          git config --global user.name "BardhylGit"

          prereleaseTag=pre-release.${{ env.NEXT_PRERELEASE_INDEX }}

          # shto tag pre-release tek comit ku ishte tag release, dhe shtoje ne origine
          git tag -a $prereleaseTag -m "Pre-release number ${{ env.NEXT_PRERELEASE_INDEX }}" ${{ env.LAST_RELEASE_COMMIT_ID }}
          git push origin $prereleaseTag 

          # fshije ne lokalisht dhe ne origjine tagun release
          if [ ${{ env.RELEASE_TAG_EXISTS }} = 1]; then
            git tag -d release
            git push --delete origin release
          fi

          # shto tagun release ne HEAD dhe push ne origjine
          git tag release ${{ needs.find_comit_with_version.outputs.LAST_VERSION_COMMIT }}
          git push origin --tags
